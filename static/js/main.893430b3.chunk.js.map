{"version":3,"sources":["logo.svg","components/Welcome.js","components/Message.js","components/Counter.js","components/ClassClick.js","components/FunctionClick.js","components/EventBind.js","components/ChildComponent.js","components/ParentComponent.js","components/UserGreet.js","components/Inline.js","components/Form.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Component","FunctionClick","ChildComponent","props","onClick","greetHandler","Inline","Form","handleUsernameChange","event","setState","username","target","value","handleCommentsChange","comments","handleTopicChange","topic","handleSubmit","alert","state","preventDefault","onSubmit","this","type","onChange","App","className","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"sKAAAA,EAAOC,QAAU,IAA0B,kC,4JCErBC,YCAAA,YCAAA,YCAGA,YCaVC,I,OCbSD,YCQTE,MARf,SAAwBC,GACpB,OACI,6BACI,4BAAQC,QAAS,kBAAMD,EAAME,aAAa,WAA1C,mBCFkBL,YCDNA,Y,MCaTM,IC8CAC,E,kDA1DX,WAAYJ,GAAQ,IAAD,8BACf,cAAMA,IASVK,qBAAuB,SAACC,GACpB,EAAKC,SAAS,CACVC,SAAUF,EAAMG,OAAOC,SAZZ,EAenBC,qBAAsB,SAACL,GACnB,EAAKC,SAAS,CACVK,SAAUN,EAAMG,OAAOC,SAjBZ,EAqBnBG,kBAAoB,SAACP,GACjB,EAAKC,SAAS,CACXO,MAAOR,EAAMG,OAAOC,SAvBR,EA0BnBK,aAAe,SAAAT,GACXU,MAAM,GAAD,OAAI,EAAKC,MAAMT,SAAf,YAA2B,EAAKS,MAAML,SAAtC,YAAkD,EAAKK,MAAMH,QAClER,EAAMY,kBAzBN,EAAKD,MAAQ,CACRT,SAAU,GACVI,SAAU,GACVE,MAAO,SANG,E,qDA+Bf,OACI,0BAAMK,SAAUC,KAAKL,cACjB,6BACI,2CACA,2BAAOM,KAAK,OACZX,MAAOU,KAAKH,MAAMT,SAClBc,SAAUF,KAAKf,wBAEnB,6BACI,2CACA,8BAAUK,MAAOU,KAAKH,MAAML,SAC5BU,SAAUF,KAAKT,wBAEnB,6BACI,wCACA,4BAAQD,MAAOU,KAAKH,MAAMH,MAAOQ,SAAUF,KAAKP,mBAC5C,4BAAQH,MAAM,SAAd,SACA,4BAAQA,MAAM,WAAd,WACA,4BAAQA,MAAM,OAAd,SAGR,4BAAQW,KAAK,UAAb,e,GArDGxB,aC8CJ0B,MA/Bf,WACE,OACE,yBAAKC,UAAU,OACf,kBAAC,EAAD,QCRgBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.893430b3.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React ,{Component} from 'react';\n\nclass Welcome extends Component{\n    \n    render(){\n        const {name, heroName} = this.props\n        return <h1>Welcome {name} a.k.a {heroName}</h1>\n    }\n}\n\nexport default Welcome;","import React ,{Component} from 'react';\n\nclass Message extends Component{\n    constructor(){\n        super();\n        this.state = {\n            message: 'Welcome Visitor'\n        }\n    }\n    changeMessage(){\n        this.setState({\n            message: 'Thank you for subscribing'\n        })\n    }\n    render(){\n        return (\n            <div>\n            <h1>{this.state.message}</h1>\n            <button onClick={()=>this.changeMessage()}>Subscribe</button>\n            </div>\n        )\n    }\n}\n\nexport default Message;","import React, { Component } from 'react'\n\nclass Counter extends Component {\n    constructor(props){\n        super(props)\n        this.state = {\n            count: 0\n        }\n    }\n    // increment(){\n    //     this.setState({\n    //         count: this.state.count + 1\n    //     }, ()=>{\n    //         console.log('Callback Vakue: ',this.state.count)   \n    //     })\n    //     console.log(this.state.count)   \n        \n    // }\n    increment(){\n        this.setState((prevState, props)=>({\n            count: prevState.count + 1\n        }), ()=>{\n            console.log('Callback Vakue: ',this.state.count)   \n        })\n        console.log(this.state.count)   \n        \n    }\n    incrementFive(){\n        this.increment()\n        this.increment()\n        this.increment()\n        this.increment()\n        this.increment()\n    }\n    render() {\n        return (\n            <div>\n                <div>Count - {this.state.count}</div>\n                <button onClick={()=>this.incrementFive()}>Increment</button>\n            </div>\n        )\n    }\n}\n\nexport default Counter\n","import React, { Component } from 'react'\n\nclass ClassClick extends Component {\n    clickHandler(){\n        console.log('Click the button')\n    }\n\n    render() {\n        return (\n            <div>\n                <button onClick={this.clickHandler}>Ckick Me</button>\n            </div>\n        )\n    }\n}\n\nexport default ClassClick\n","import React from 'react'\nimport { func } from 'prop-types';\n\nfunction FunctionClick() {\n\n    function clickHandler(){\n        console.log('Button clicked')\n    }\n    return (\n        <div>\n            <button onClick={clickHandler}>Click</button>\n        </div>\n    )\n}\n\nexport default FunctionClick\n","import React, { Component } from 'react'\n\nclass EventBind extends Component {\n    constructor(props) {\n        super(props)\n    \n        this.state = {\n             message: 'Hello'\n        }\n        // this.clickHandler = this.clickHandler.bind(this)\n    }\n    clickHandler = ()=>{\n        this.setState({\n            message: \"Good Bye\"\n        })\n        console.log(this)\n    }\n    // clickHandler(){\n    //     this.setState({\n    //         message: \"Good Bye\"\n    //     })\n    //     console.log(this)\n    // }\n    \n    render() {\n        return (\n            <div>\n                <div>{this.state.message}</div>\n                {/* <button onClick={this.clickHandler.bind(this)}>Click</button> */}\n                <button onClick={this.clickHandler}>Click</button>\n            </div>\n        )\n    }\n}\n\nexport default EventBind\n","import React from 'react'\n\nfunction ChildComponent(props) {\n    return (\n        <div>\n            <button onClick={() => props.greetHandler('child')}>Greet Parent </button>\n        </div>\n    )\n} \n\nexport default ChildComponent\n","import React, { Component } from 'react'\nimport ChildComponent from './ChildComponent';\n\nclass ParentComponent extends Component {\n    constructor(props) {\n        super(props)\n    \n        this.state = {\n             parentName: 'Parent'\n        }\n        this.greetParent = this.greetParent.bind(this)\n    }\n    greetParent(childName){\n        alert(`Hello ${this.state.parentName} from ${childName}`)\n    }\n    render() {\n        return (\n            <div>\n                <ChildComponent greetHandler={this.greetParent}/>\n            </div>\n        )\n    }\n}\n\nexport default ParentComponent\n","import React, { Component } from 'react'\n\nclass UserGreet extends Component {\n    constructor(props) {\n        super(props)\n    \n        this.state = {\n             isLoggedIn: false\n        }\n    }\n    \n\n    render() {\n\n        let message\n        if(this.state.isLoggedIn){\n            message = <div>Welcome Raiyan</div>\n        }\n        else{\n            message = <div>Welcome Guest</div>\n        }\n\n        return(\n            <div>{message}</div>\n        )\n        // if(this.state.isLoggedIn){\n        //     return (\n        //         <div>\n        //             <div>Welcome Raiyan</div>\n             \n        //         </div>\n        //     )\n        // }\n        // else{\n        //     return (\n        //         <div>\n             \n        //             <div>Welcome Guest</div>\n        //         </div>\n        //     )\n        // }\n    }\n}\n\nexport default UserGreet\n","import React from 'react'\n\nconst heading = {\n    fontSize: '72px',\n    color: 'blue'\n}\n\nfunction Inline() {\n    return (\n        <div>\n         <h1 style={heading}>Inline</h1>   \n        </div>\n    )\n}\n\nexport default Inline\n","import React, { Component } from 'react'\n\nclass Form extends Component {\n    constructor(props) {\n        super(props)\n    \n        this.state = {\n             username: '',\n             comments: '',\n             topic: 'react'\n        }\n\n    }\n    handleUsernameChange = (event)=>{\n        this.setState({\n            username: event.target.value\n        })\n    }\n    handleCommentsChange =(event)=>{\n        this.setState({\n            comments: event.target.value\n        })\n    }\n\n    handleTopicChange = (event) => {\n        this.setState({\n           topic: event.target.value \n        })\n    }\n    handleSubmit = event => {\n        alert(`${this.state.username} ${this.state.comments} ${this.state.topic}`)\n        event.preventDefault()\n    }\n    render() {\n        return (\n            <form onSubmit={this.handleSubmit}>\n                <div>\n                    <label>Username</label>\n                    <input type='text' \n                    value={this.state.username} \n                    onChange={this.handleUsernameChange}/>\n                </div>\n                <div>\n                    <label>Comments</label>\n                    <textarea value={this.state.comments}\n                    onChange={this.handleCommentsChange}></textarea>\n                </div>\n                <div>\n                    <label>Topic</label>\n                    <select value={this.state.topic} onChange={this.handleTopicChange}>\n                        <option value=\"react\">React</option>\n                        <option value=\"angular\">Angular</option>\n                        <option value=\"vue\">Vue</option>\n                    </select>\n                </div>\n                <button type=\"submit\">Submit</button>\n            </form>\n        )\n    }\n}\n\nexport default Form\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Greet from './components/Greet';\nimport Welcome from './components/Welcome';\nimport Hello from './components/Hello';\nimport Message from './components/Message';\nimport Counter from './components/Counter';\nimport FunctionClick from './components/FunctionClick';\nimport ClassClick from './components/ClassClick';\nimport EventBind from './components/EventBind';\nimport ParentComponent from './components/ParentComponent';\nimport UserGreet from './components/UserGreet';\nimport NameList from './components/NameList';\nimport Stylesheet from './components/Stylesheet'\nimport Inline from './components/Inline';\nimport Form from './components/Form';\nfunction App() {\n  return (\n    <div className=\"App\">\n    <Form/>\n    {/* <Inline/> */}\n    {/* <Stylesheet primary={true}/> */}\n    {/* <NameList/> */}\n    {/* <UserGreet/> */}\n    {/* <ParentComponent/> */}\n    {/* <EventBind/> */}\n    {/* <FunctionClick/>\n    <ClassClick/> */}\n    {/* <Counter/> */}\n    {/* <Message/> */}\n      {/* <Greet name=\"Bruce\" heroName=\"Batman\"> \n        <p>This is children props</p>\n      </Greet>\n      <Greet name=\"Sharif\" heroName=\"Superman\">\n  <button>Action</button>\n      </Greet>*/}\n      {/* <Greet name=\"Diana\" heroName=\"wonder woman\">\n        <button>Action</button>\n      </Greet>\n      <Welcome name=\"Bruce\" heroName=\"Batman\">\n      </Welcome> \n      <Welcome name=\"Diana\" heroName=\"wonder woman\"/> */}\n      {/*<Hello/> */}\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}